import re
import spacy
from nltk.corpus import stopwords
from collections import Counter
from nltk import pos_tag
from nltk.tokenize import word_tokenize

class Response:
    def __init__(self):
        self.responses = [
            "Have you tried restarting your {}? It often resolves many issues.",
            "To fix a slow {} performance, try closing unnecessary applications.",
            "If your {} is overheating, ensure it's placed in a well-ventilated area and clean any dust from the vents.",
            "I'm doing well, thank you! How can I assist you with your computer problem?"
        ]
        self.default_response = "I did not understand, can you repeat?"

    def get_response(self, index, entity=None):
        if index == -1:
            return self.default_response
        return self.responses[index].format(entity)

class ChatBot:
    def __init__(self):
        self.chatProcessor = ChatProcessor()
        self.response_manager = Response()
        self.exit_commands = ("quit", "goodbye", "exit", "no")

    def make_exit(self, user_message):
        for command in self.exit_commands:
            if command in user_message:
                print("Goodbye!")
                return True
        return False

    def chat(self):
        user_message = input("Welcome to computer support. How can I assist you today? ")

        while not self.make_exit(user_message):
            user_message = self.respond(user_message)

    def find_intent_match(self, user_message):
        bow_user_message = Counter(self.chatProcessor.preprocess(user_message))
        processed_responses = [Counter(self.chatProcessor.preprocess(response)) for response in self.response_manager.responses]
        similarity_list = [self.chatProcessor.compareOverlap(doc, bow_user_message) for doc in processed_responses]
        
        if max(similarity_list) == 0:
            return -1  # No match found

        response_index = similarity_list.index(max(similarity_list))
        return response_index
    
    def find_entities(self, user_message):
        tagged_user_message = pos_tag(self.chatProcessor.preprocess(user_message))
        message_nouns = self.chatProcessor.extractNouns(tagged_user_message)
        tokens = self.chatProcessor.word2vec(" ".join(message_nouns))
        category = self.chatProcessor.word2vec(blank_spot)
        word2vec_result = self.chatProcessor.computeSimilarity(tokens, category)
        word2vec_result.sort(key=lambda x: x[2])
        if len(word2vec_result) < 1:
            return blank_spot
        else:
            return word2vec_result[-1][0]
        
    def respond(self, user_message):
        response_index = self.find_intent_match(user_message)
        entity = None
        if response_index != -1:
            entity = self.find_entities(user_message)
        response = self.response_manager.get_response(response_index, entity)
        print(response)
        input_message = input("Do you have any other questions? ")           
        return input_message

class ChatProcessor:
    def __init__(self):
        self.word2vec = spacy.load('en_core_web_lg')
        self.stopWords = set(stopwords.words('english'))
    
    def preprocess(self, input_sentence):
        input_sentence = input_sentence.lower()
        input_sentence = re.sub(r'[^\w\s]','',input_sentence)
        tokens = word_tokenize(input_sentence)
        input_sentence = [i for i in tokens if not i in self.stopWords]
        return input_sentence
    
    def compareOverlap(self, user_message, possible_response):
        similar_words = 0
        for token in user_message:
            if token in possible_response:
                similar_words += 1
        return similar_words
    
    def extractNouns(self, tagged_message):
        message_nouns = [token[0] for token in tagged_message if token[1].startswith("N")]
        return message_nouns
    
    def computeSimilarity(self, tokens, category):
        output_list = [[token.text, category.text, token.similarity(category)] for token in tokens]
        return output_list

blank_spot = "computer"

chatbot = ChatBot()
chatbot.chat()